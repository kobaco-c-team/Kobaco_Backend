name: Java CD with Gradle

on:
  push:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Gradle 빌드에 필요한 데이터를 캐싱하여 빌드 속도를 향상시키는 설정
    # actions/cache 액션을 사용
    # Gradle 캐시에 의존성, 래퍼 등을 빌드할 때 저장해두었다가 나중에 재빌드할 때 재사용해서 속도를 향상
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: ${{ runner.os }}-gradle-

    # .env 파일에 환경 변수 값들 집어넣기 (Github Secret에 저장한 정보를 .env 파일로 echo)
    - name: Set .env file
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        script: |
          rm -rf ./.env
          touch ./.env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> ./.env
          echo "DOCKER_REPOSITORY=${{ secrets.DOCKER_REPOSITORY }}" >> ./.env
          echo "DATASOURCE_URL_LOCAL=${{ secrets.DATASOURCE_URL_LOCAL }}" >> ./.env
          echo "DATASOURCE_USERNAME=${{ secrets.DATASOURCE_USERNAME }}" >> ./.env
          echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}" >> ./.env
    
    # gradle 파일에 접근할 권한을 부여
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

    # build 작업 수행
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # docker image를 build 하고 docker hub에 push 
    - name: Docker Build and Push
      run: |
        sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        sudo docker build -f ./.deploy/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} .
        sudo docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}

    # EC2에서 docker-compose file을 직접 가져오기
    - name: deploy docker-compose push
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        source: "./.deploy/docker-compose.yml"
        target: "/home/ubuntu"
        strip_components: 2

    # EC2 인스턴스에서 docker hub로 부터 pull 받아서 image 실행하기기    
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}
          docker stop ${{ secrets.DOCKER_REPOSITORY }}
          docker rm -f ${{ secrets.DOCKER_REPOSITORY }}
          docker-compose -f docker-compose.yml up -d
          docker image prune -f

